name: GitHub Actions Docker Build
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  HostedActions:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Run Tests
        run: |
          set -x
          pip3 install -r requirements.txt
          python3 -m pytest
          
          # pytest --junitxml=test-results/coverage.xml
          # python3 -m pytest --cov-report xml:test-results/results.xml
          # python3 -m pytest -v -o junit_family=xunit1 --cov-report xml:test-results/coverage.xml --junitxml=test-results/results.xml
          python3 -m pytest -v --cov --cov-report xml:test-results/coverage.xml --junitxml=test-results/results.xml

          # pwd
          # ls -ltra
          # ls -ltra ./test-results || true 
          # cat ./test-results/results.xml
          # echo
          # cat ./test-results/coverage.xml

          a=`cat ./test-results/coverage.xml | grep line-rate | grep 'name="."' | sed 's/^.*line-rate="\([^"]*\)".*/\1/' | tr -d '\n'`
          b=0.80

          if (( $(bc <<<"$a > $b") )); then 
              echo "The Coverage has met the threshold of $b"
          else
              echo "The Coverage has not met the minimum threshold. This build will terminate.  Please increase your coverage to build and deploy."
              exit 1
          fi

          # ls -ltra /home/runner/work/cloudFunctionPython/cloudFunctionPython/test-results
          # echo ${{ github.ref }}

          #pytest -v  --cov --cov-report=xml --cov-report=html
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        if: contains('
            refs/heads/main
           ', github.ref)

  build-and-push:
    runs-on: ubuntu-latest
    needs: HostedActions
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Replace Secret Tokens in Main
        run: |
          sed -i 's/SENDGRIDTOKENHERE/${{ secrets.SENDGRID_API_KEY }}/g' main.py
          sed -i 's/MSTEAMSTOKENHERE/${{ secrets.TEAMSSTRING }}/g' main.py
        
      - uses: RafikFarhad/push-to-gcr-github-action@v4.1
        with:
          gcloud_service_key: ${{ secrets.GCLOUD_SERVICE_KEY }} # can be base64 encoded or plain text
          registry: gcr.io
          project_id: myanthosproject2
          image_name: pythonfunction
          image_tag: latest,${{ github.run_id }}
          dockerfile: ./Dockerfile
          context: .
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'
      #- id: 'deploy'
      #  uses: 'google-github-actions/deploy-cloudrun@v0'
      #  with:
      #    service: 'namespaces/511842454269/services/hellofresh'
      #    image: 'gcr.io/myanthosproject2/pythonfunction:${{ github.run_id }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      # Run Gcloud Run Deploy as GCP gcloud command instead
      - id: 'gcloud'
        name: 'gcloud'
        run: |-
          gcloud run deploy namespaces/511842454269/services/hellofresh --image gcr.io/myanthosproject2/pythonfunction:${{ github.run_id }} --quiet --platform managed --region us-central1 --project myanthosproject2 --format json
